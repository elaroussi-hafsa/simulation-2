#pour 2 solitons : graphique de comparaison + deux methodes pour voir la differnce damplitude numerique et graphique
import numpy as np
from scipy.fftpack import fft, ifft, fftfreq, fftshift, ifftshift
import matplotlib.pyplot as plt
import math

# Set up parameters and initial condition
L = 50  # Length of domain
N = 256  # Number of grid points
dt = 0.004  # Timestep
x = np.linspace(0, L, N)  # Spatial grid
k = np.linspace(-int(N / 2), int(N / 2) - 1, N)  # wavenumbers

# Define the parameters for the two solitons
c1 = 0.75
a1 = 0.33
c2 = 0.4
a2 = 0.65


# Compute the linear combination of the analytical solutions
u_initial = (
    (c1 / 2)
    * np.power(np.cosh(math.sqrt(c1) / 2 * (x - a1 * L)), -2)
    + (c2 / 2)
    * np.power(np.cosh(math.sqrt(c2) / 2 * (x - a2 * L)), -2)
)

u = u_initial
t = 75  # Time in seconds
etapes = int(t / dt)

# Initialize arrays to store numerical and analytical solutions
numerical_solution = np.zeros((etapes, N))
analytical_solution = np.zeros((etapes, N))

# Time integration using Euler method
for i in range(etapes):
    u_hat = fftshift(fft(u))
    g_hat = np.exp(1j * ((2 * np.pi / L) * k) ** 3 * dt) * u_hat
    g = ifft(ifftshift(g_hat)).real
    dg2dx = ifft(ifftshift(1j * (2 * np.pi / L) * k * fftshift(fft(g ** 2)))).real
    u = g - 3 * dg2dx * dt

    # Store numerical and analytical solutions at each time step
    numerical_solution[i] = u

    # Compute the analytical solution for the linear combination of solitons
    analytical_solution[i] = (
        (c1 / 2)
        * np.power(np.cosh((math.sqrt(c1) / 2) * ((x - a1 * L - c1* i * dt))), -2)
        + (c2 / 2)
        * np.power(np.cosh((math.sqrt(c2) / 2) * ((x - a2 * L - c2* i * dt))), -2)
    )


# Plot space-time plot for numerical and analytical solutions
plt.figure(figsize=(10, 6))
plt.subplot(1, 2, 1)
plt.imshow(numerical_solution.T, aspect="auto", origin="lower", cmap="hot",
           extent=[0, t, 0, L], vmin=0, vmax=max(c1/2,c2/2))
plt.colorbar(label="Numerical Solution")
plt.xlabel("Time")
plt.ylabel("Space")
plt.title("Numerical Solution")

plt.subplot(1, 2, 2)
plt.imshow(analytical_solution.T, aspect="auto", origin="lower", cmap="hot",
           extent=[0, t, 0, L], vmin=0, vmax=max(c1/2,c2/2))
plt.colorbar(label="Analytical Solution")
plt.xlabel("Time")
plt.ylabel("Space")
plt.title("Analytical Solution (Linear Combination)")




plt.tight_layout()
plt.show()



# Calculate the absolute difference in amplitude between numerical and analytical solutions
amplitude_difference = np.abs(numerical_solution - analytical_solution)

# Plot space-time plot for the amplitude difference
plt.figure(figsize=(8, 6))
plt.imshow(amplitude_difference.T, aspect="auto", origin="lower", cmap="coolwarm",
           extent=[0, t, 0, L])
plt.colorbar(label="Amplitude Difference")
plt.xlabel("Time")
plt.ylabel("Space")
plt.title("Amplitude Difference between Numerical and Analytical Solutions")

plt.tight_layout()
plt.show()


#comparaison solution numÃ©rique et analytique 
#By selecting a time range where the solitons have not interacted significantly,
# we can better assess the accuracy of the numerical solution compared to the analytical 
#solution  allows us to focus on a regime where the linear combination of solitons is a valid
# approximation.





#we can choose a range of time steps in the middle of the simulation where the solitons have not interacted significantly.
#we compute a measure of the difference between them, chosen the maximum absolute difference as a method. 


#compute an average difference of the numerical and analytical solutions(we compare on the point that are non zero)
def average_difference(list1, list2):
    diffs=0
    count=0
    for i in range(len(list1)):
        for j in range(len(list1[0])):
            if list1[i][j]!=0 or list2[i][j]!=0:
                diffs+=abs(list1[i][j] - list2[i][j]) 
                count+=1
    return diffs/count

# Choose the time range for comparison
start_time = 1
end_time = int(etapes/10)

# Extract the corresponding solutions for the chosen time range
numerical_range = numerical_solution[start_time:end_time]
analytical_range = analytical_solution[start_time:end_time]

# Compute the average difference, in %
diff=(average_difference(numerical_range, analytical_range)/max(c1/2,c2/2))*100

print("Maximum Absolute Difference in %:", diff)
