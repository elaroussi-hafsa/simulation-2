#graphique de deux solutions pour un seul soliton + graphique comparaison de la difference de leur amplitude
import numpy as np
from scipy.fftpack import fft, ifft, fftfreq, fftshift, ifftshift
import matplotlib.pyplot as plt
import math

L = 50  # Length of domain
N = 256  # Number of grid points
dt = 0.004  # Timestep
x = np.linspace(0, L, N)  # Spatial grid
k = np.linspace(-int(N / 2), int(N / 2) - 1, N)  # wavenumbers

# Define parameters for the soliton
c = 0.75
a = 0.33

# Compute the initial condition for the soliton
u_initial = (c / 2) * np.power(np.cosh(math.sqrt(c) / 2 * (x - a * L)), -2)

u = u_initial
t = 75  # Time in seconds
etapes = int(t / dt)
# Initialize arrays to store numerical and analytical solutions
numerical_solution = np.zeros((etapes, N))
analytical_solution = np.zeros((etapes, N))
# Time integration using Euler method
for i in range(etapes):
    u_hat = fftshift(fft(u))
    g_hat = np.exp(1j * ((2 * np.pi / L) * k) ** 3 * dt) * u_hat
    g = ifft(ifftshift(g_hat)).real
    dg2dx = ifft(ifftshift(1j * (2 * np.pi / L) * k * fftshift(fft(g ** 2)))).real
    u = g - 3 * dg2dx * dt

    # Store numerical solution at each time step
    numerical_solution[i] = u
#Compute the analytical solution for the soliton
    analytical_solution[i] = (c / 2) * np.power(np.cosh((math.sqrt(c) / 2) * ((x - a * L - c * i * dt))), -2)
# Plot space-time plot for numerical and analytical solutions
plt.figure(figsize=(10, 6))
plt.subplot(1, 2, 1)
plt.imshow(numerical_solution.T, aspect="auto", origin="lower", cmap="hot",
           extent=[0, t, 0, L], vmin=0, vmax=c/2)
plt.colorbar(label="Numerical Solution")
plt.xlabel("Time")
plt.ylabel("Space")
plt.title("Numerical Solution")

plt.subplot(1, 2, 2)
plt.imshow(analytical_solution.T, aspect="auto", origin="lower", cmap="hot",
           extent=[0, t, 0, L], vmin=0, vmax=c/2)
plt.colorbar(label="Analytical Solution")
plt.xlabel("Time")
plt.ylabel("Space")
plt.title("Analytical Solution (Single Soliton)")

plt.tight_layout()
plt.show()

# Calculate the absolute difference between numerical and analytical solutions
amplitude_difference = np.abs(numerical_solution - analytical_solution)

# Plot space-time plot for the amplitude difference
plt.figure(figsize=(8, 6))
plt.imshow(amplitude_difference.T, aspect="auto", origin="lower", cmap="coolwarm",
           extent=[0, t, 0, L])
plt.colorbar(label="Amplitude Difference")
plt.xlabel("Time")
plt.ylabel("Space")
plt.title("Amplitude Difference between Numerical and Analytical Solutions")

plt.tight_layout()
plt.show()
